name: Build-multiplat

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # 使用正斜杠确保跨平台兼容性
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Package executables
      shell: bash
      run: |
        BUILD_DIR="${{ github.workspace }}/build"
        echo "Building directory: $BUILD_DIR"
        
        if [ ! -d "$BUILD_DIR" ]; then
          echo "Error: Build directory does not exist!"
          ls -la "${{ github.workspace }}"
          exit 1
        fi
        
        cd "$BUILD_DIR"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        if ("${{ matrix.os }}" -eq "windows-latest") {
              Get-ChildItem -Filter "*.exe" | ForEach-Object {
                Write-Host "Found executable: $($_.Name)"
                Compress-Archive -Path $_.Name -DestinationPath "${{ github.repository_name }}-windows.zip" -Force
              }
        }
          
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "Looking for executable files on macOS..."
          find . -type f -perm +111 ! -name "*.*" | while read exe_file; do
            echo "Found executable: $exe_file"
            tar -czf "${{ github.repository_name }}-macos.tar.gz" "$exe_file"
          done
          
        else
          echo "Looking for executable files on Linux..."
          find . -type f -executable ! -name "*.*" | while read exe_file; do
            echo "Found executable: $exe_file"
            tar -czf "${{ github.repository_name }}-linux.tar.gz" "$exe_file"
          done
        fi
        
        echo "Created packages:"
        ls -la *.zip *.tar.gz 2>/dev/null || echo "No package files found"

    - name: Upload executable artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.c_compiler }}-executable
        path: |
          ${{ github.workspace }}/build/*.zip
          ${{ github.workspace }}/build/*.tar.gz

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all executable artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release-artifacts/**/*.zip
          ./release-artifacts/**/*.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
